<?php
/**
 * @file
 * Code for the ting_genre_page feature.
 */

include_once 'ting_genre_page.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_genre_page_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_genre_page_theme($existing, $type, $theme, $path) {
	return array(
		'ting_genre_page_related_content' => array(
			'variables' => array(
				'events' => array(),
				'news' => array(),
				'nodes_pr_row' => 4,
			),
			'template' => 'ting-genre-page-related-content',
			'path' => $path . '/templates',
		),
		'ting_genre_page_link_group' => array(
			'variables' => array(
				'link_items' => array(),
				'links_items_pr_row' => 4,
			),
			'template' => 'ting-genre-page-link-group',
			'path' => $path . '/templates',
		),
	);
}

/**
 * Preprocess function a ting genre page link group.
 */
function template_preprocess_ting_genre_page_link_group(&$variables) {
	$link_items = $variables['link_items'];
	$link_items_count = count($link_items);
	$links_items_pr_row = $variables['links_items_pr_row'];
	$links_items_pr_row = $links_items_pr_row < 1 ? 1 : $links_items_pr_row;
	$links_items_pr_row = $links_items_pr_row > 4 ? 4 : $links_items_pr_row;

	$row_classes = _ting_genre_page_link_group_row_classes();
  $column_classes = _ting_genre_page_link_group_coloumn_classes();	

  // Setup each row of link items
	$rows = array();
	$offset = 0;
	while ($offset < $link_items_count) {
		$row_links = array_slice($link_items, $offset, $links_items_pr_row);
		// Get the actual row count (there might not be enough)
		$row_count = count($row_links);
		$offset += $row_count;
		// Setup each column of the row.
		$columns = array();
		foreach ($row_links as $key => $link) {
			$columns[$column_classes[$key]] = array(
				'title' => check_plain($link['title']),
				'url' => url($link['url']),
				'image' => $link['image'],
			);
		}
		$row_class = $row_classes[$row_count]; 
		$rows[] = array(
			'columns' => $columns,
			'class' => $row_class,
		);
	}
	$variables['rows'] = $rows;
}

/**
 * Wrapper function to hold row classes for a link group.
 */
function _ting_genre_page_link_group_row_classes() {
	return array(
		1 => 'group-blocks--one',
		2 => 'group-blocks--two',
		3 => 'group-blocks--three',
		4 => 'group-blocks--four',
	);
}

/**
 * Wrapper function to hold column classes for a link group.
 */
function _ting_genre_page_link_group_coloumn_classes() {
	return array(
    0 => 'group-blocks--first',
    1 => 'group-blocks--second',
    2 => 'group-blocks--third',
    3 => 'group-blocks--fourth',		
	);
}

/**
 * Preprocess function for the ting_genre_page_related_content theme hook.
 */
function template_preprocess_ting_genre_page_related_content(&$variables) {
	$events = $variables['events'];
	$news = $variables['news'];
	// We could do something different with events and news. In this default
	// implementation we show them together, events first and news last.
	$nodes = array_merge($events, $news);
	$nodes_pr_row = $variables['nodes_pr_row'];
	$row_classes = _ting_genre_page_link_group_row_classes();
  $column_classes = _ting_genre_page_link_group_coloumn_classes();
  // Setup each row of nodes
  $rows = array();	
	$offset = 0;
	while ($offset < count($nodes)) {
		$row_nodes = array_slice($nodes, $offset, $nodes_pr_row);
		// Get the actual row count (there might not be enough nodes)
		$row_count = count($row_nodes);
		$offset += $row_count;
		$coloumns = array();	
		foreach ($row_nodes as $key => $node) {
			// Display the title image with the cs_adaptive_image formatter.
			$field_name = 'field_ding_event_list_image';
			if ($node->type == 'ding_news') {
				$field_name = 'field_ding_news_list_image';
			}
			$image = field_view_field('node', $node, $field_name, array(
        'label' => 'hidden',
        'type' => 'cs_adaptive_image',
        'settings' => array(
          'image_link' => '', // We take care of the linking ourself
          'styles' => array(
            'breakpoint_1' => 768,
            'style_1' => 'ting_related_links_medium',
            'breakpoint_2' => 480,
            'style_2' => 'ting_related_links_small',
            'max_style' => 'ting_related_links_large',
            'fallback_style' => 'large', // Use a Drupal default style as fallback
          ),
        ),
        ));
			// Setup the column.
			$columns[$column_classes[$key]] = array(
				'image' => $image,
				'title' => check_plain($node->title),
				'url' => url(drupal_get_path_alias('node/' . $node->nid)),
			);
		}
		$rows[$row_classes[$row_count]]['columns'] = $columns;
	}
	$variables['rows'] = empty($rows) ? FALSE : $rows;
}

/**
 * Implements hook_form_alter().
 *
 * Adds form atltering CSS to genre page node edit form.
 */
function ting_genre_page_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'genre_page_node_form') {
		$path = drupal_get_path('module', 'ting_genre_page');
		$form['#attached']['css'][] = $path . '/css/ting_genre_page.form.css';
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the form widget for the field_collection field.
 */
function ting_genre_page_form_genre_page_node_form_alter(&$form, &$form_state) {
	// Store the field name for clearner syntax.
	/*$field_name = 'field_collection_related_links';
	$language = $form[$field_name]['#language'];
	$children = element_children($form[$field_name][$language]);
	// Remove the 'add_more' element.
	array_pop($children);
	foreach ($children as $delta) {
		$field_row = &$form[$field_name][$language][$delta];

		$field_row['field_related_link_title'][$language][0]['value']['#size'] = 35;
		$field_row['field_related_link_url'][$language][0]['value']['#size'] = 35;
	}
	$css = '.field-name-field-collection-related-links .form-wrapper { 
		display: inline-block;
	}';
	$form[$field_name]['#attached']['css'] = array(
		$css => array('type' => 'inline'),
	);*/
	//file_put_contents("/home/drupalpro/debug/debug.txt", print_r($form[$field_name], TRUE), FILE_APPEND);
}

/**
 * Get nodes of type 'ding_event' with the specified tags.
 * 
 * @param $tids
 *   A string specifying a term ID or and array of term IDs to match against.
 * @param $count_limit
 *   The max number of nodes to return.
 * @param $time_limit
 *   A time limit in days specifying how many days into the future an event, 
 *   in the return array, is allowed to start.
 *
 * @return $return
 *   An array of node IDs.
 *   An empty array if no matching nodes were found.
 */
function ting_genre_page_get_events_with_terms($tids, $count_limit, $time_limit) {
	// Convert datetimes to the database format.
	$now = date('Y-m-d H:i:s'); 
	$time_limit = date('Y-m-d H:i:s', time() + ($time_limit * 24 * 3600));
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'ding_event')
		->propertyCondition('status', 1)
		->fieldCondition('field_ding_event_tags', 'tid', $tids)
		// Limit the result to events that hasn't completed yet.
		->fieldCondition('field_ding_event_date', 'value2', $now, '>')
		->fieldCondition('field_ding_event_date', 'value', $time_limit, '<=')
		->fieldOrderBy('field_ding_event_date', 'value', 'ASC')
		->range(0, $count_limit);
	$result = $query->execute();
	$events = array();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
		$events = node_load_multiple($nids);
	}
	return $events;
}

/**
 * Get nodes of type 'ding_news' with specified tags.
 *
 * @param $tids
 *   A string specifying a term ID or and array of term IDs to match against.
 * @param $count_limit
 *   The max number of nodes to return.
 * 
 * @return $return
 *   An array of node IDs.
 *   An empty array if no matching nodes were found.
 */
function ting_genre_page_get_news_with_terms($tids, $count_limit) {
	$now = time();
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'ding_news')
		->propertyCondition('status', 1)
		->fieldCondition('field_ding_news_tags', 'tid', $tids)
		// Ensure we get the most recent news.
		->propertyOrderBy('created', 'DESC')
		->range(0, $count_limit);
	$result = $query->execute();
	$news = array();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
		$news = node_load_multiple($nids);
	}
	return $news;
}

/**
 * Helper function to get a setting from a field value (only single value).
 */
function _ting_genre_page_get_setting($node, $field_name) {
	if (isset($node->{$field_name}) && !empty($node->{$field_name})) {
		$value = field_get_items('node', $node, $field_name);
		return array_shift(array_shift(array_values($value)));
	}
	return FALSE;
}