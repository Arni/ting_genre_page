<?php
/**
 * @file
 * Code for the ting_genre_page feature.
 */

include_once 'ting_genre_page.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_genre_page_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_genre_page_theme($existing, $type, $theme, $path) {
	return array(
		'ting_genre_page_related_content' => array(
			'variables' => array(
				'events' => array(),
				'news' => array(),
				'nodes_pr_row' => 4,
			),
			'template' => 'ting-genre-page-related-content',
			'path' => $path . '/templates'
		),
	);
}

/**
 * Preprocess function for the ting_genre_page_related_content theme hook.
 */
function template_preprocess_ting_genre_page_related_content(&$variables) {
	$events = $variables['events'];
	$news = $variables['news'];
	// We could do something different with events and news. In this default
	// implementation we show them together, events first and news last.
	$nodes = array_merge($events, $news);
	$nodes_pr_row = $variables['nodes_pr_row'];
	$row_classes = array(
		1 => 'group-blocks--one',
		2 => 'group-blocks--two',
		3 => 'group-blocks--three',
		4 => 'group-blocks--four',
	);
  $column_classes = array(
    0 => 'group-blocks--first',
    1 => 'group-blocks--second',
    2 => 'group-blocks--third',
    3 => 'group-blocks--fourth',
  );
  $rows = array();	
	$offset = 0;
	// Setup each row of nodes
	while ($offset < count($nodes)) {
		$row_nodes = array_slice($nodes, $offset, $nodes_pr_row);
		// Get the actual row count (there might not be enough nodes)
		$row_count = count($row_nodes);
		$offset += $row_count;
		$coloumns = array();	
		foreach ($row_nodes as $key => $node) {
			if ($node->type == 'ding_event') {
				$image = field_view_field('node', $node, 'field_ding_event_title_image', 'default');
				file_put_contents("/home/drupalpro/debug/debug.txt", print_r($image, TRUE), FILE_APPEND);	
			}
			else if ($node->type == 'ding_news') {
				$image = field_view_field('node', $node, 'field_ding_news_title_image', 'default');
				file_put_contents("/home/drupalpro/debug/debug.txt", print_r($image, TRUE), FILE_APPEND);	
			}			
			$columns[$column_classes[$key]] = array(
				'image' => $image,
				'title' => check_plain($node->title),
				'url' => url(drupal_get_path_alias('node/' . $node->nid)),
			);
		}
		$rows[$row_classes[$row_count]]['columns'] = $columns;
	}
	$variables['rows'] = empty($rows) ? FALSE : $rows;
}

/**
 * Get nodes of type 'ding_event' with the specified tags.
 * 
 * @param $tids
 *   A string specifying a term ID or and array of term IDs to match against.
 * @param $count_limit
 *   The max number of nodes to return.
 * @param $time_limit
 *   A time limit in days specifying how many days into the future an event, 
 *   in the return array, is allowed to start.
 *
 * @return $return
 *   An array of node IDs.
 *   An empty array if no matching nodes were found.
 */
function ting_genre_page_get_events_with_terms($tids, $count_limit, $time_limit) {
	// Convert datetimes to the database format.
	$now = date('Y-m-d H:i:s'); 
	$time_limit = date('Y-m-d H:i:s', time() + ($time_limit * 24 * 3600));
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'ding_event')
		->propertyCondition('status', 1)
		->fieldCondition('field_ding_event_tags', 'tid', $tids)
		// Limit the result to events that hasn't completed yet.
		->fieldCondition('field_ding_event_date', 'value2', $now, '>')
		// Add the supplied $time_limit contraint to our query.
		->fieldCondition('field_ding_event_date', 'value', $time_limit, '<=')
		// Get the events with the nearest start datetime.
		->fieldOrderBy('field_ding_event_date', 'value', 'ASC')
		// Add the supplied $count_limit constraint.
		->range(0, $count_limit);
	$result = $query->execute();
	$events = array();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
		$events = node_load_multiple($nids);
	}
	return $events;

}

/**
 * Get nodes of type 'ding_news' with specified tags.
 *
 * @param $tids
 *   A string specifying a term ID or and array of term IDs to match against.
 * @param $count_limit
 *   The max number of nodes to return.
 * 
 * @return $return
 *   An array of node IDs.
 *   An empty array if no matching nodes were found.
 */
function ting_genre_page_get_news_with_terms($tids, $count_limit) {
	$now = time();
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'ding_news')
		->propertyCondition('status', 1)
		->fieldCondition('field_ding_news_tags', 'tid', $tids)
		// Ensure we get the most recent news.
		->propertyOrderBy('created', 'DESC')
		->range(0, $count_limit);
	$result = $query->execute();
	$news = array();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
		$news = node_load_multiple($nids);
	}
	return $news;
}

/**
 * Helper function to get a setting from a field value (only single value).
 */
function _ting_genre_page_get_setting($node, $field_name) {
	if (isset($node->{$field_name}) && !empty($node->{$field_name})) {
		$value = field_get_items('node', $node, $field_name);
		return array_shift(array_shift(array_values($value)));
	}
	return FALSE;
}